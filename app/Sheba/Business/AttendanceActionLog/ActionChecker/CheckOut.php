<?php namespace Sheba\Business\AttendanceActionLog\ActionChecker;

use Carbon\Carbon;
use Sheba\Business\AttendanceActionLog\StatusCalculator\ShiftCheckoutStatusCalculator;
use Sheba\Business\AttendanceActionLog\WeekendHolidayByBusiness;
use Sheba\Business\Leave\HalfDay\HalfDayLeaveCheck;
use Sheba\Dal\Attendance\Statuses;
use Sheba\Dal\AttendanceActionLog\Actions;

class CheckOut extends ActionChecker
{
    public function getActionName()
    {
        return Actions::CHECKOUT;
    }

    protected function setAlreadyHasActionForTodayResponse()
    {
        $this->setResult(ActionResult::ALREADY_CHECKED_OUT);
    }

    public function check()
    {
        parent::check(); // TODO: Change the autogenerated stub
        $this->checkAlreadyCheckedIn();
        $this->checkLeftEarly();
    }

    private function checkAlreadyCheckedIn()
    {
        if ($this->isAlreadyFailed()) return;
        if (!$this->hasCheckedIn()) $this->setResult(ActionResult::CHECKIN_FIRST);
    }

    private function hasCheckedIn()
    {
        $business = $this->businessMember->business;
        $currentAssignment = null;
        $lastAttendance = null;
        $isShiftEnable = $business->isShiftEnabled() && $this->shiftAssignmentRepository->hasTodayAssignment($this->businessMember->id);
        if ($isShiftEnable) {
            $currentAssignment = $this->shiftAssignmentFinder->setBusinessMember($this->businessMember)->findCurrentAssignment();
            $lastAttendance = $this->businessMember->lastAttendance();
        }

        if ($isShiftEnable && $lastAttendance) return $currentAssignment->id == $lastAttendance->shift_assignment_id;

        return $this->attendanceLogsOfToday && $this->attendanceLogsOfToday->filter(function ($log) {
                return $log->action == Actions::CHECKIN;
            })->count() > 0;
    }

    protected function checkLeftEarly()
    {
        if ($this->isAlreadyFailed()) return;

        if ($this->isNotInShift()) {
            $this->checkForGeneral();
        } else {
            $this->checkForShift();
        }
    }

    protected function checkForGeneral()
    {
        $date = Carbon::now();
        $weekendHoliday = new WeekendHolidayByBusiness();

        $which_half_day = $this->getHalfDay();
        $today_last_checkout_time = $this->business->calculationTodayLastCheckOutTime($which_half_day);

        if (is_null($today_last_checkout_time)) return;

        $today_checkout_time_without_second = Carbon::parse($date->format('Y-m-d H:i'));
        $is_full_day_leave = (new HalfDayLeaveCheck())->setBusinessMember($this->businessMember)->checkFullDayLeave();

        if ($today_checkout_time_without_second->lessThan(Carbon::parse($today_last_checkout_time))) {
            if ($weekendHoliday->isWeekendByBusiness($date) || $weekendHoliday->isHolidayByBusiness($date) || $is_full_day_leave) {
                $this->setResult(ActionResult::SUCCESSFUL);
            } else {
                $this->setResult(ActionResult::LEFT_EARLY_TODAY);
            }
        }
    }

    protected function checkForShift()
    {
        /** @var ShiftCheckoutStatusCalculator $shiftCheckoutStatusCalculator */
        $shiftCheckoutStatusCalculator = app(ShiftCheckoutStatusCalculator::class);

        $which_half_day = $this->getHalfDay();

        $status = $shiftCheckoutStatusCalculator
            ->setBusinessMember($this->businessMember)
            ->setShiftAssignment($this->shiftAssignment)
            ->setWhichHalfDay($which_half_day)
            ->calculate();

        if ($status == Statuses::LEFT_TIMELY) {
            $this->setResult(ActionResult::SUCCESSFUL);
        } else if ($status == Statuses::LEFT_EARLY) {
            $this->setResult(ActionResult::LEFT_EARLY_TODAY);
        }
    }
}
